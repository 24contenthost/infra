name: Deploy MySQL Infrastructure

on:
  workflow_dispatch:

jobs:
  deploy_mysql:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "./db/docker-compose.yml"
          target: "$HOME"

      - name: Deploy and Debug MySQL (Run docker-compose, initialize and debug env variables)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # Экспортируем переменные окружения
            export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            export MYSQL_USER=${{ secrets.MYSQL_USER }}
            export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            export MYSQL_SERVICE_NAME=${{ secrets.MYSQL_SERVICE_NAME }}
            export MYSQL_CONTAINER_NAME=${{ secrets.MYSQL_CONTAINER_NAME }}
            export MYSQL_PORT=${{ secrets.MYSQL_PORT }}
            export MYSQL_DATABASE_GALLERY=${{ secrets.MYSQL_DATABASE_GALLERY }}

            # Debug environment variables
            echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD"
            echo "MYSQL_USER: $MYSQL_USER"
            echo "MYSQL_PASSWORD: $MYSQL_PASSWORD"   
            echo "MYSQL_SERVICE_NAME: $MYSQL_SERVICE_NAME"
            echo "MYSQL_CONTAINER_NAME: $MYSQL_CONTAINER_NAME"
            echo "MYSQL_PORT: $MYSQL_PORT"
            echo "MYSQL_DATABASE_GALLERY: $MYSQL_DATABASE_GALLERY"
            
            # Navigate to the db folder and initialize
            cd ~/db
            
            docker-compose pull
            docker-compose down --remove-orphans
            docker-compose up -d

            # Checking MySQL status with retry
            echo "Waiting for MySQL to start..."
            attempts=0
            max_attempts=30
            while ! docker exec $MYSQL_CONTAINER_NAME mysqladmin --user=root --password=${MYSQL_ROOT_PASSWORD} ping --silent; do
              if [ $attempts -ge $max_attempts ]; then
                echo "MySQL did not start in time."
                exit 1
              fi
              echo "MySQL is not ready, retrying..."
              attempts=$((attempts+1))
              sleep 2
            done
            echo "MySQL is ready!"
            
            # Creating database for gallery
            echo "Creating database for gallery..."
            docker exec $MYSQL_CONTAINER_NAME mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS \`${MYSQL_DATABASE_GALLERY}\`;"
            
            # Creating user and granting privileges
            echo "Creating user and granting privileges..."
            docker exec $MYSQL_CONTAINER_NAME mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';"
            docker exec $MYSQL_CONTAINER_NAME mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "GRANT ALL PRIVILEGES ON \`${MYSQL_DATABASE_GALLERY}\`.* TO '${MYSQL_USER}'@'%';"
            docker exec $MYSQL_CONTAINER_NAME mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "FLUSH PRIVILEGES;"
            
            echo "Database and user initialization completed."
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_SERVICE_NAME: ${{ secrets.MYSQL_SERVICE_NAME }}
          MYSQL_CONTAINER_NAME: ${{ secrets.MYSQL_CONTAINER_NAME }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DATABASE_GALLERY: ${{ secrets.MYSQL_DATABASE_GALLERY }}
